---
- name: Desktop Configurator
  hosts: [ubuntu, mint]    # lab-rat
#  become: true
  vars:
    git_diff_tool: meld
    git_merge_tool: meld
  tasks:
# CLI
    - name: Update System
      become: true
      ansible.builtin.apt:
        update_cache: true
#        upgrade: dist

    - name: Install Bash Utilities
      become: true
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      with_items:
        - grep
        - plocate
        - curl
        - fzf
        - nano
        - net-tools
        - htop

    - name: Install CLI programs
      become: true
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      with_items:
        - git
        - git-man
        - ansible
        - docker.io

    - name: Check if kubectl exists
      ansible.builtin.command: kubectl version --client
      register: kubectl_check
      changed_when: false
      ignore_errors: true

    - name: Install kubectl # noqa: command-instead-of-module
      become: true
      ansible.builtin.shell: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl && rm kubectl
      args:
        executable: /bin/bash
      changed_when: kubectl_check.failed
      when: kubectl_check.failed
    - name: Check kubectl Instalation
      ansible.builtin.command: kubectl version --client
      changed_when: false
      when: kubectl_check.failed

    - name: Check if minikube exists
      ansible.builtin.command: minikube version
      register: minikube_check
      changed_when: false
      ignore_errors: true
    - name: Install minikube # noqa: command-instead-of-module
      become: true
      ansible.builtin.shell: |
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube && rm minikube-linux-amd64
      args:
        executable: /bin/bash
      changed_when: minikube_check.failed
      when: minikube_check.failed
    - name: Check minikube Instalation
      ansible.builtin.command: minikube version
      changed_when: false
      when: minikube_check.failed

# Dev GUI
    - name: Install pref. dev dependencies
      become: true
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      with_items:
        - wget
        - software-properties-common
        - apt-transport-https
        - gpg

    - name: Install pref. dev programs
      become: true
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      with_items:
        - firefox
        - p7zip-full
        - p7zip-rar
        - virtualbox
#        - virtualbox-ext-pack
        - virtualbox-qt
        - unzip
        - "{{ git_diff_tool }}"
        - "{{ git_merge_tool }}"

    - name: Configure git diff/merge tool
      community.general.git_config:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        scope: global
      loop:
        - name: merge.tool
          value: "{{ git_merge_tool }}"
        - name: "mergetool.{{ git_merge_tool }}.path"
          value: "/usr/bin/{{ git_merge_tool }}"
        - name: mergetool.prompt
          value: false
        - name: diff.tool
          value: "{{ git_diff_tool }}"
        - name: "difftool.{{ git_diff_tool }}.path"
          value: "/usr/bin/{{ git_diff_tool }}"
        - name: difftool.prompt
          value: false

    - name: Check VS Code
      ansible.builtin.command: code --version
      register: vscode_check
      changed_when: false
      ignore_errors: true
    - name: Install VS Code # noqa: command-instead-of-module
      become: true
      ansible.builtin.shell: |
        curl -L -o "code.deb" "https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64"
        sudo dpkg -i code.deb
        rm code.deb
      args:
        executable: /bin/bash
      changed_when: vscode_check.failed
      when: vscode_check.failed
    - name: Check VS Code Installation
      ansible.builtin.command: code --version
      changed_when: false
      when: vscode_check.failed

    - name: Check Font
      ansible.builtin.command: ls /usr/share/fonts/hack
      register: font_check
      changed_when: false
      ignore_errors: true
    - name: Download Font
      ansible.builtin.get_url:
        url: https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/Hack.zip
        dest: /tmp/hack.zip
        mode: '0755'
      changed_when: font_check.rc != 0
      when: font_check.rc != 0
    - name: Install Font
      become: true
      ansible.builtin.shell: |
        set -o pipefail
        rm -rf /tmp/hack
        unzip /tmp/hack.zip -d /tmp/hack
        sudo mv /tmp/hack /usr/share/fonts/hack # noqa: yaml[line-length]
        gsettings set org.gnome.Terminal.Legacy.Profile:/org/gnome/Terminal/Legacy/Profiles:/:$(gsettings get org.gnome.Terminal.ProfilesList default | tr -d "'")/ font 'NerdNerdFontMono'
        rm -rf /tmp/hack.zip /tmp/hack
      args:
        executable: /bin/bash
      changed_when: font_check.rc != 0
      when: font_check.rc != 0

    - name: Check Starship
      ansible.builtin.shell: cat "{{ ansible_user_dir }}/.bashrc" | grep "STARSHIP_CONFIG"
      args:
        executable: /bin/bash
      changed_when: false
      register: starship_check
      ignore_errors: true
    - name: Install Starship
      become: true
      ansible.builtin.shell: |
        rm /tmp/install.sh
        curl -sSL https://starship.rs/install.sh -o /tmp/install.sh
        sudo sh /tmp/install.sh -y
        sudo rm /tmp/install.sh
        echo 'eval "$(starship init bash)"' >> "{{ ansible_user_dir }}/.bashrc"
        echo "export STARSHIP_CONFIG=~/.config/starship.toml" >> "{{ ansible_user_dir }}/.bashrc"
        mkdir -p "{{ ansible_user_dir }}/.config"
      args:
        executable: /bin/bash
      changed_when: starship_check.rc != 0
      when: starship_check.rc != 0
    - name: Download Starship toml
      ansible.builtin.copy:
        remote_src: false
        src: starship.toml
        dest: "{{ ansible_user_dir }}/.config/starship.toml"
        mode: '0755'
      changed_when: starship_check.rc != 0
      when: starship_check.rc != 0
